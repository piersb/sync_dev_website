#! /bin/bash

# Pulls a copy of the WordPress database to your local machine, together with any assets
# Config files live in ~/.sync_dev_website/


E_REMOTEFAIL=80
E_COPYFAIL=81
E_IMPORTFAIL=82
E_UPDATEFAIL=83
E_ASSETSFAIL=84
E_CONFIGFAIL=85



if [ -r $HOME/.sync_dev_website/$1.config ] ; then
	. $HOME/.sync_dev_website/$1.config
else
	echo "can't read $HOME/.sync_dev_website/$1.config"
	echo "available config files are:"
 	find $HOME/.sync_dev_website/*.config -type f | sed -e 's/.*\///' -e 's/.config//'
	exit $E_CONFIGFAIL
fi

echo attempting to sync $NAME

if [ -z $MYSQLCNF ]; then 							
	MYSQLCNF=$HOME/.sync_dev_website/$1.mysql.cnf 
	echo "no MYSQLCNF set in config file; defaulting to $MYSQLCNF"
fi


echo connecting to $SERVER

echo "dumping live database"
ssh $SERVER . $REMOTEBIN/dumplive.sh || {
	echo "can't dump database on remote" >&2
	exit $E_REMOTEFAIL
}

echo "compressing database"
ssh $SERVER "gzip -cf $DUMPFILE > /tmp/$NAME.dumpfile.gz" || {
	echo "can't compress database on remote" >&2
	exit $E_REMOTEFAIL
}

echo "copying database from /tmp/$NAME.dumpfile.gz to /tmp/latest.$$.sql.gz"
scp $SERVER:/tmp/$NAME.dumpfile.gz /tmp/latest.$$.sql.gz || {
	echo "can't copy from remote to local"
	exit $E_COPYFAIL
}

echo "uncompressing database" 
gunzip /tmp/latest.$$.sql.gz || {
	echo "can't uncompress local copy of database"
	exit $E_COPYFAIL
}

echo "replacing local database"
mysql --defaults-extra-file=$MYSQLCNF < /tmp/latest.$$.sql || {
	echo "can't import live db dump into local db"
	echo "trying to start MAMP and see if that solves the problem"
	open -a MAMP || {
		echo "sorry, couldn't start MAMP"
		exit $E_IMPORTFAIL
	}
}

if [ -z $FURNITUREDIR ] ; then 
	echo "no furniture directory set in config file"
else
	echo "site configured to use furniture images; downloading them"
	rsync -avh $SERVER:"$REMOTEDIR/furniture/" "$FURNITUREDIR" || {
		echo "can't pull furniture from remote to local"
		exit $E_ASSETSFAIL
	}
fi

if [ $1 != dezeen ] ; then # hacky, just to get it up and running

	if [ -z $REMOTE_ASSETS_DIR ] ; then
		echo "no remote assets directory set in config file"
		echo "falling back to $REMOTEDIR/wp-content/uploads"
		rsync -avh $SERVER:"$REMOTEDIR/wp-content/uploads" "$LOCALDIR/wp-content" || {
			echo "can't pull assets from remote to local"
			exit $E_ASSETSFAIL
		}
	else
		echo "site configured to use assets outside of main wp-content folder; downloading them"
		rsync -avh $SERVER:"$REMOTE_ASSETS_DIR" "$LOCAL_ASSETS_DIR" || {
			echo "can't pull assets from remote to local"
			exit $E_ASSETSFAIL
		}
	fi

fi

# this will need to be fixed for the LCF when we have two or more versions of that site. Hack fix by taking out the test for #2.
if [ $1 = lsf ] ; then
	echo "LSF site"
	echo "Soft linking assets directory to $ASSETSDIR"
	unlink "$LOCALDIR/assets"
	ln -s "$LOCAL_ASSETS_DIR" "$LOCALDIR/assets"
	echo "Soft linking furniture directory to $FURNITUREDIR"
	unlink "$LOCALDIR/furniture"
	ln -s "$FURNITUREDIR" "$LOCALDIR/furniture"
fi


echo "updating local database to point to itself"
mysql --defaults-extra-file=$MYSQLCNF < "$HOME/.sync_dev_website/$LOCALISE_SQL" || {
	echo "can't update local database to point to -dev"
	exit $E_UPDATEFAIL
}

echo "live database downloaded and installed to dev"


# sanity check to make sure we have enough memory assigned locally for big databases like LSF
D_SIZE=`ssh $SERVER "du -h $DUMPFILE" | awk '{ print $1 }' | sed 's/M//'`
if [[ $D_SIZE =~ .*K.* ]] ; then 
	exit 0			# Database can be measured in Kb; bail
fi
PHP_MEM=`/Applications/MAMP/bin/php/php5.4.34/bin/php -i | awk '/memory_limit/ { print $5 }' | sed 's/M//'`

# bc will return 0 for false and 1 for true
if [ $(echo "$D_SIZE >= $PHP_MEM" | bc) -ne 0 ] ; then
	echo "Remote Database is $D_SIZE Mb and MAMP PHP Memory is only $PHP_MEM Mb"
	echo "May cause problems; try upping the limit in php.ini"
fi


exit 0
