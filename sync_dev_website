#! /bin/bash

# Pulls a copy of the WordPress database to your local machine, together with any assets
# Config files live in ~/.sync_dev_website/

# TODO:
# - use GNU getopt to accept long arguments
# - put in a package management system to enforce GNU getopt
# - ? rewrite in a friendlier language 
# - accept long arguments to 
# 	- not do image downloading
# 	- (other stuff)

E_REMOTEFAIL=80
E_COPYFAIL=81
E_IMPORTFAIL=82
E_UPDATEFAIL=83
E_ASSETSFAIL=84
E_CONFIGFAIL=85

DUMPFILE="/tmp/dumpfile.$$"	

if [ -r $HOME/.sync_dev_website/$1.config ] ; then
	. $HOME/.sync_dev_website/$1.config
else
	echo "can't read $HOME/.sync_dev_website/$1.config"
	echo "available config files are:"
 	find $HOME/.sync_dev_website/*.config -type f | sed -e 's/.*\///' -e 's/.config//'
	exit $E_CONFIGFAIL
fi

if [ -z "$NAME" ]; then echo NAME is not set in config file; exit $E_CONFIGFAIL; fi
if [ -z "$DATABASE" ]; then echo DATABASE is not set in config file; exit $E_CONFIGFAIL; fi
if [ -z "$REMOTEMYSQLCNF" ]; then echo REMOTEMYSQLCNF is not set in config file; exit $E_CONFIGFAIL; fi
if [ -z "$SERVER" ]; then echo SERVER is not set in config file; exit $E_CONFIGFAIL; fi




if [ -z "$DATASERVER" ]; then 
	echo "DATASERVER is not set in config file; setting to $SERVER"
	DATASERVER=$SERVER
fi

echo attempting to sync $NAME

if [ -z $MYSQLCNF ]; then 							
	MYSQLCNF=$HOME/.sync_dev_website/$1.mysql.cnf 
	echo "no MYSQLCNF set in config file; defaulting to $MYSQLCNF"
fi


echo connecting to $DATASERVER

echo "dumping live database"
ssh $DATASERVER "mysqldump --defaults-file=$REMOTEMYSQLCNF $DATABASE > $DUMPFILE" || {
	echo "can't dump database on remote" >&2
	exit $E_REMOTEFAIL
}

echo "compressing database"
ssh $DATASERVER "gzip -cf $DUMPFILE > /tmp/$NAME.dumpfile.gz" || {
	echo "can't compress database on remote" >&2
	exit $E_REMOTEFAIL
}

echo "copying database from /tmp/$NAME.dumpfile.gz to /tmp/latest.$$.sql.gz"
scp $DATASERVER:/tmp/$NAME.dumpfile.gz /tmp/latest.$$.sql.gz || {
	echo "can't copy from remote to local"
	exit $E_COPYFAIL
}

echo "uncompressing database" 
gunzip /tmp/latest.$$.sql.gz || {
	echo "can't uncompress local copy of database"
	exit $E_COPYFAIL
}

echo "replacing local database"
echo "trying command mysql --defaults-extra-file=$MYSQLCNF $DATABASE < /tmp/latest.$$.sql"
mysql --defaults-extra-file=$MYSQLCNF $DATABASE < /tmp/latest.$$.sql || {
	echo "can't import live db dump into local db"
	echo "trying to start MAMP and see if that solves the problem"
	open -a MAMP || {
		echo "sorry, couldn't start MAMP"
		exit $E_IMPORTFAIL
	}
}


if [ -z "$LOCALISE_SQL" ]; then 
	echo "LOCALISE_SQL is not set in config file"
 	echo "Making the assumption that you're over-riding siteurl and home in wp-config.php"
else
	echo "updating local database to point to itself"
	mysql --defaults-file=$MYSQLCNF $DATABASE < "$HOME/.sync_dev_website/$LOCALISE_SQL" || {
		echo "can't update local database to point to -dev"
		exit $E_UPDATEFAIL
	}

	echo "live database downloaded and installed to dev"
fi

# 
# commenting this out because we now check on staging for any images that can't be found locally
# so no real point bringing down 100s of images.
#
# if [ -z $FURNITUREDIR ] ; then 
# 	echo "no furniture directory set in config file"
# else
# 	echo "site configured to use furniture images; downloading them"
# 	rsync -avh $SERVER:"$REMOTEDIR/furniture/" "$FURNITUREDIR" || {
# 		echo "can't pull furniture from remote to local"
# 		exit $E_ASSETSFAIL
# 	}
# fi

# if [ -z $REMOTE_ASSETS_DIR ] ; then
# 	echo "no remote assets directory set in config file"
# 	echo "falling back to $REMOTEDIR/wp-content/uploads"
# 	rsync -avh $SERVER:"$REMOTEDIR/wp-content/uploads" "$LOCALDIR/wp-content" || {
# 		echo "can't pull assets from remote to local"
# 		exit $E_ASSETSFAIL
# 	}
# else
# 	echo "site configured to use assets outside of main wp-content folder; downloading them"
# 	rsync -avh $SERVER:"$REMOTE_ASSETS_DIR" "$LOCAL_ASSETS_DIR" || {
# 		echo "can't pull assets from remote to local"
# 		exit $E_ASSETSFAIL
# 	}
# fi



# this will need to be fixed for the LCF when we have two or more versions of that site. Hack fix by taking out the test for #2.
if [ $1 = lsf ] ; then
	echo "LSF site"
	echo "Soft linking assets directory to $ASSETSDIR"
	unlink "$LOCALDIR/assets"
	ln -s "$LOCAL_ASSETS_DIR" "$LOCALDIR/assets"
	echo "Soft linking furniture directory to $FURNITUREDIR"
	unlink "$LOCALDIR/furniture"
	ln -s "$FURNITUREDIR" "$LOCALDIR/furniture"
fi


exit 0
